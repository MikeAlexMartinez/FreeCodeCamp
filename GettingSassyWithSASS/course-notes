###################
# SassShop Course #
###################

Contents:

1 - Why Sass
2 - The Sass Workflow
3 - Sass Basics
4 - Advanced SASS
5 - Media Queries
6 - Modular Architecture
7 - Libraries and Tools


## Section 1 - Why Sass

- Websites are becoming increasingly complex.
- CSS is getting harder to maintain.
- Writing styles is often tedious and repetitive.
- CSS can only do so much for us...

We can use Sass Variables to create DRY CSS code.
- We can use for colors, selectors or values.

  e.g.

  .header {
    background-color: #531946;
  }
  .header a {
    color: #fff;
  }
  .header a:hover {
    color: #095169;
  }

  .footer {
    background-color: #30162B;
    color: #fff;
  }
  .footer a {
    color: #095169;
  }
  .footer a:hover {
    color: #fff;
  }

  .feature a {
    background-color: #30162B;
    color: #fff;
  }

  .feature a:hover {
    color: #531946;
  }

  .content {
    background-color: #fff;
    color: #222;
  }

Becomes:

  $white: #ffffff;
  $black: #222222; // NOT! ;)
  $eggplant: #531946;
  $eggplantDark: #30162B;
  $teal: #095169;

  .header {
    background-color: $eggplant;
  }
  .header a {
    color: $white;
  }
  .header a:hover {
    color: $teal;
  }

  .footer {
    background-color: $eggplantDark;
    color: $white;
  }
  .footer a {
    color: $teal;
  }
  .footer a:hover {
    color: $white;
  }

  .feature a {
    background-color: $eggplantDark;
    color: $white;
  }

  .feature a:hover {
    color: $eggplant;
  }

  .content {
    background-color: $white;
    color: $black;
  }

We can use Sass-mixins for border-radius.

  e.g.

  .header {
    border-radius: 5px;
    padding: 5px 20px;
    /* ... */
  }

  .footer {
    border-radius: 5px;
    padding: 5px 20px;
    /* ... */
  }

  .feature a {
    border-radius: 5px;
    padding: 5px 20px;
    /* ... */
  }

  .content {
    border-radius: 5px;
    padding: 5px 20px;
    /* ... */
  }

becomes:

  @mixin rounded-box {
    border-radius: 5px;
    padding: 5px 20px;
  }

  .header {
    @include rounded-box
    /* ... */
  }

  .footer {
    @include rounded-box
    /* ... */
  }

  .feature a {
    @include rounded-box
    /* ... */
  }

  .content {
    @include rounded-box
    /* ... */
  }

We can use it for selectors:

  e.g.

  .header {
    /* ... */
  }
  .header a {
    /* ... */
  }
  .header a:hover {
    /* ... */
  }

  .footer {
    /* ... */
  }
  .footer a {
    /* ... */
  }
  .footer a:hover {
    /* ... */
  }

  .feature a {
    /* ... */
  }
  .feature a:hover {
    /* ... */
  }

  .content {
    /* ... */
  }

  becomes

  .header {
  /* ... */
    a {
      /* ... */
      
      &:hover {
        /* ... */
      }
    }
  }

  .footer {
    /* ... */
    a {
      /* ... */
      &:hover {
        /* ... */
      }
    }
  }

  .feature a {
    /* ... */
    &:hover {
      /* ... */
    }
  }

  .content {
    /* ... */
  }

To Recap - Why SASS?

  - Reduced complexity.
  - Increased maintainability.
  - Minimized repetition.
  - Supercharged CSS!

What is Sass?

Sass is an extension of CSS that adds power and elegance to the basic language. 
It allows you to use variables, nested rules, mixins, inline imports, and more, 
all with a fully CSS-compatible syntax. Sass helps keep large stylesheets 
well-organized, and get small stylesheets up and running quickly...

It includes:

a CSS Extension, CSS Preprocessor, SassScript Language, SassScript Interpreter

There are two Sass syntaxes,

Sassy CSS, whereby any valid CSS is therefore valid SASS.

And .sass, which is the original hamlesque syntax.



## Section 2 - Sass Workflow

To run sass you can type:

  sass <input-filename> <output-filename>

or/

  sass <input-dir> <output-dir>

e.g.

  sass sass/application.scss css/application.css

Preferably you can run with a watcher (sneaky spy!):

  sass --watch source.scss:output.css

It may fail if output directory doesn't exist.

--update will create if doesn't exist, as will watch.

You can use options to customise output:

Options: nested, expanded, compact, compressed.

You should enable source maps in debugger.



## Section 3 - Sass Basics

1 - Nesting
2 - Imports & Organisation
3 - Variables
4 - Math & Color Utilities

# 1 - Nesting

Like HTML, Sass can be nested.

By allowing nesting Sass can:
 - reduce repetition
 - increase Organisation
 - improve maintainability

One should seek to keep nesting for CSS less than
3 levels deep.

One can use an & ampersand to reference the parent of 
a nested element

e.g.

  a {
    color: red;

    &:hover {
      color: black;
    }
  }

It is possible to nest parent selectors like so:

  a {
    .footer & {
      text-decoration: none;

      span {
        opacity: .5;
      }
    }

    span {
      .navigation & {
        display: block;
      }
    }
  }

becomes: 

  .footer a {
    text-decoration: none;
  }
  .footer a span {
    opacity: .5;
  }
  .navigation a span {
    display: block;
  }

The & selector can be combined with string:

  .module {
    &__child {
      margin-bottom: 1em;
    }

    &--modifier {
      display: inline;
    }
  }

becomes:

  .module__child {
    margin-bottom: 1em;
  }

  .module--modifier {
    display: inline;
  }

You can also nest namespace attributes

  a {
    border {
      color: #fff;
      style: solid;
      width: 1px;
    }
  }

becomes:

  a {
    border-color: #fff;
    border-style: solid;
    border-width: 1px;
  }

# 2 - Imports and Organisation

Sass modifies @iport to include a resource during compilation instead of during the client side.

@import takes a path to a Sass resource, file extension is optional. It looks within the main Sass file's 
parent directory. 

e.g.

Structure:

  - Project Awesomse
    |- sass
        |- lib
            |- compass.scss
            |- fontawesome.scss
        |- base.scss
        |- grid.scss
        |- application.scss
        |- utilities.scss
        |- vars.scss
    |- css
        |- application.css

Code: 'application.scss'

  @import "vars";
  @import "lib/compass";
  @import "lib/fontawesome";
  @import "utilities";
  @import "grid";
  @import "base";

Command: sass --watch sass/application.scss:css/application.css

"sass sass/ css/" would compile the whole directory into the target directory.

"Imports partials" allow us to use an _underscore to define a partial.

Partials won't compile to css on their own. They must be imported.

They allow us to break up code into modular maintainable chunks.

# Common Practices

_vars.scss is a separate sheet for all variables and settings

Order of imports are as follows:

Variables > Libraries > Base > Modules > Pages

e.g.

  // Variables
  @import "vars";

  // Libraries
  @import "lib/compass";
  @import "lib/fontawesome";
  
  // Base Styles, Utility Classes, etc.
  @import "base/all";
  
  // Modules
  @import "modules/all";
  
  // Page Styles
  @import "pages/all";

_all.scss is often used to import collections of similar imports.

You can keep imports DRY by using comma separation to group them
together.

  // Variables
  @import "vars";

  // Libraries
  @import "lib/compass",
          "lib/fontawesome";
  
  // Application
  @import "base/all",
          "modules/all",
          "pages/all";

# Sass Basics Variables

Some uses:
- colors
- font sizes
- font families
- font paths
- padding
- margins
- breakpoints
- border-radius
- content
- gradients
- shadows
- SELECTORS!
- LOGIC!
- ALL THE THINGS!!!

Variables are defined a la CSS prop/val pairs. 

  $property: value;

They a rew then referenced with there property "$name". 

# Variable Data Types
  - Numbers
  - Strings
  - Colors
  - Lists
  - Booleans
  - Null
  - Maps

Previous variables can be redeclared with new variables

e.g. 

$border-width: 2px;
$border-width: 4px;

a {
  border-width: $border-width;
}

=>

a {
  border-width: 4px;
}

Variables are only available within the scope in which they are defined.

# Variable Interpolation

Variables can be injected into selectors, property names and values, and Strings
via the #{$variable} container.

e.g.

sass:

  $side: left;

  .box-#{side} {
    border-#{side}: 1px solid #ccc;

    &:before {
      content: "It's on the #{$side} side";
    }
  }

=> 

css:

  .box-left {
    border-left: 1px solid #ccc;
  }

  .box-left:before {
    content: "It's on the left side";
  }

One should seek to use a combination of Descriptive colors and Functional Colors. 
And even a combination of the two.

e.g.

  // Descriptive Colors
  $white:        #ffffff;
  $grey:         #222222;
  $eggplant:     #531946;
  $eggplantDark: #30162B;
  $teal:         #095169;

  // Functional Colors
  $header--background:          $eggplant;
  $header__logo--color:         $white;
  $header__logo--color--hover:  $teal;

  $footer--background:          $eggplant--dark;
  $footer--color:               $white;
  $footer__nav--color:          $teal;
  $footer__nav--color--hover:   $white;

  $content--background:         $white;
  $content--color:              $grey;

  $feature__link--background:   $eggplant--dark;
  $feature__link--color:        $white;
  $feature__link--color--hover: $eggplant;

  .header {
    background-color: $header--background;
  }
  .header a {
    color: $header__logo--color;
  }
  .header a:hover {
    color: $header__logo--color--hover;
  }

  .footer {
    background-color: $footer--background;
    color: $footer--color;
  }
  .footer a {
    color: $footer__nav--color;
  }
  .footer a:hover {
    color: $footer__nav--color--hover;
  }

  .feature a {
    background-color: $feature__link--background;
    color: $feature__link--color;
  }

  .feature a:hover {
    color: $eggplant;
  }

  .content {
    background-color: $content--background;
    color: $content--color;
  }

# Sass Basics - Maths Operations

Sass allows basic maths operations and string concatenation.

Sass attempts to operate on mismatched units, but will throw an 
error if incompatible.

CSS allows for separating values with the / symbol.

e,g, 1.25em/1.5 Tahoma, Arial, sans-serif;

To trigger division one needs to:

  - use a variable: $padding / 2  
  - use paranthese ( 350 / .25 )
  - use an expression for part of the division: 3 + 5 / 10

Sass also comes with a set of maths functions.

abs($num) - absolute value
ceil($num) - round up to closest whole number
floor($num) - round down to closest whole number
percentage($num) - convert to percentage
round($num) - round to closest whole number
max($list) - max list value
min($list) - min list value

One can also use math to manipulate colors.

# Sass Basics - Color Utilities

rgba($hex, $alpha) - Converts Hex to RGBA and sets alpha (opacity)
mix($color1, $color2) - Mixes two colors together
lighten($color, $percent) - Makes a color lighter
grayscale($color) - converts a color to grayscale
darken($color, $percent) - Makes a color darker
invert($color) - inverts a color
saturate($color, $percent) - Makes a color more saturated
complement($color) - Returns the complement of a color
desaturate($color, $percent) - Makes a color less saturated

AND MORE!!!...

This website: 'http://jackiebalzer.com/color' gives examples of these.


## Section Four - Advanced SASS

Advanced Sass

1 - Mixins (@include)
2 - Inheritance (@extend)
3 - Directives
4 - Maps

Advanced Sass Mixins 
  - Variables let you reuse single values,
  - Mixins let you reuse blocks of styles.


e.g.

  @mixin rounded-box {
    border-radius: 5px;
    padding: 5px 20px;
  }

  .header {
    @include rounded-box;
  }

We define with the @mixin directive

We use with the $include directive

Mixins must be defined before they're referenced.

Mixins can be used with any other style rules.

You can nest within mixins just like you can elsewhere.

Mixins accept optional arguments.


# Mixin Arguments

Are great for repeated blocks of styles where the values differ from case 
to case.

e.g.

  @mixin rounded-corners($radius) {
    -webkit-border-radius: $radius;
       -moz-border-radius: $radius;
            border-radius: $radius;
  }

  .header {
    @include rounded-corners(5px);
  }

  .footer {
    @include rounded-corners(10px);
  }

You can set a mixins argument to have a default value like so:

  @mixin rounded-corners($radius: 5px) {
    ...
  }

Arguments need to be comma-separated and order matters.

Optional arguments must be last in the set.

Mixins keyword arguments mean order doesn't matters
e.g.

  @mixin rounded-box($radius: 5px, $padding: 20px) {
    border-radius: $radius;
    padding: $padding;
  }

  .header {
    @include rounded-box($padding: 10px, $radius: 10px);
  }

One can use Variable interpolation within a mixin

e.g.
  @mixin toolbar-border($side, $width: 2px) {
    border-#{$side}: $width solid $toolbar-border;
  }

  .sidebar--left {
    @include toolbar-border("right");
  }

Mixins Margin & Padding

  @mixin margin--vert($top, $bottom: $top) {
    margin-bottom: $bottom;
    margin-top: $top;
  }

  .module { @include margin--vert(1em, 3em); }


# Inheritance

One can use the @extend directive to help group selectors together,

e.g.

  .message {
    border: 2px solid;
    margin-bottom: 1em;
    padding: 1em;
    text-align: center;
  }

  .message-alert {
    @extend .message;
    @include message-colors($yellow);
  }

Becomes:

  .message,
  .message-alert {
    border: 2px solid;
    margin-bottom: 1em;
    padding: 1em;
    text-align: center;
  }

  .message-alert {
    border-color: goldenrod;
    color: goldenrod;
  }

Any cSS class can be extended

We 